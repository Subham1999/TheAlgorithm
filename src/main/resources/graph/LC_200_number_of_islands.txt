Problem:
Given an m x n 2D binary grid which represents a map of '1's (land) and '0's (water), return the number of islands.

An island is surrounded by water and is formed by connecting adjacent lands horizontally or vertically.
You may assume all four edges of the grid are all surrounded by water.

ex:
(1)
grid = [
  ["1","1","1","1","0"],
  ["1","1","0","1","0"],
  ["1","1","0","0","0"],
  ["0","0","0","0","0"]
]
Answer:- 1

(2)
grid = [
  ["1","1","0","0","0"],
  ["1","1","0","0","0"],
  ["0","0","1","0","0"],
  ["0","0","0","1","1"]
]
Answer:- 3

Approaches:
class Solution {
  private static final int[][] directions = { { -1, 0 }, { 0, -1 }, { 0, 1 }, { 1, 0 } };

  private void dfs(final char[][] grid, final int M, final int N, int i, int j, final int[][] visited) {
    if (i < 0 || i >= M) {
      return;
    }
    if (j < 0 || j >= N) {
      return;
    }
    if (visited[i][j] == 1) {
      return;
    }
    if (grid[i][j] == '0') {
      return;
    }
    visited[i][j] = 1;
    for (int[] direction : directions) {
      dfs(grid, M, N, i + direction[0], j + direction[1], visited);
    }
  }

  public int numIslands(char[][] grid) {
    final int M = grid.length;
    final int N = grid[0].length;
    final int[][] visited = new int[M][N];
    int islandCounter = 0;
    for (int i = 0; i < M; ++i) {
      for (int j = 0; j < N; ++j) {
        if (visited[i][j] == 0 && grid[i][j] == '1') {
          dfs(grid, M, N, i, j, visited);
          islandCounter++;
        }
      }
    }
    return islandCounter;
  }
}